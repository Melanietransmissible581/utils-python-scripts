#!/usr/bin/env python3
"""
Script de Backup Universal
Criado para fazer backups completos de diret√≥rios com funcionalidades avan√ßadas
"""

import os
import sys
import json
import tarfile
import zipfile
import hashlib
import argparse
from pathlib import Path
from datetime import datetime, timedelta
import fnmatch
import shutil

class BackupUniversal:
    def __init__(self):
        # Definindo diret√≥rio base padr√£o para backup (agora √© o root '/')
        self.area_trabalho = Path("/")

        # Diret√≥rio de backups (agora fixo em ~/backups)
        self.dir_backups = Path("~/backups").expanduser()
        self.dir_backups.mkdir(parents=True, exist_ok=True)

        # Arquivo de √≠ndice dos backups
        self.indice_backups = self.dir_backups / "indice_backups.json"

        # Padr√µes de exclus√£o padr√£o
        self.padroes_exclusao = [
            # Arquivos tempor√°rios
            '*.tmp', '*.temp', '*.log', '*.cache',
            # Node.js
            'node_modules', 'npm-debug.log', '.npm',
            # Python
            '__pycache__', '*.pyc', '.pytest_cache', 'venv', '.venv',
            # Git
            '.git',
            # IDEs
            '.vscode', '.idea', '*.swp', '*.swo',
            # Builds
            'build', 'dist', 'target',
            # OS
            '.DS_Store', 'Thumbs.db', '.Trash',
            # Grandes arquivos comuns
            '*.iso', '*.dmg', '*.img'
        ]
        
        # Padr√µes personalizados (adicionados pelo usu√°rio)
        self.padroes_custom = []
        
        # Estat√≠sticas do backup
        self.reset_stats()
        
    def reset_stats(self):
        """Reseta as estat√≠sticas do backup"""
        self.total_arquivos = 0
        self.arquivos_excluidos = 0
        self.diretorios_excluidos = 0
        self.tamanho_original = 0

    def adicionar_padroes_exclusao(self, padroes_string):
        """Adiciona padr√µes customizados de exclus√£o"""
        if padroes_string:
            novos_padroes = [p.strip() for p in padroes_string.split(',') if p.strip()]
            self.padroes_custom.extend(novos_padroes)
            
    def _deve_excluir(self, caminho):
        """Verifica se um arquivo/diret√≥rio deve ser exclu√≠do"""
        nome = Path(caminho).name
        
        # Verifica padr√µes padr√£o
        for padrao in self.padroes_exclusao:
            if fnmatch.fnmatch(nome, padrao):
                return True
                
        # Verifica padr√µes customizados
        for padrao in self.padroes_custom:
            if fnmatch.fnmatch(nome, padrao):
                return True
                
        return False
        
    def _calcular_tamanho_diretorio(self, caminho):
        """Calcula o tamanho total de um diret√≥rio (apenas arquivos que n√£o ser√£o exclu√≠dos)"""
        tamanho_total = 0
        total_arquivos = 0
        
        for root, dirs, files in os.walk(caminho):
            # Remove diret√≥rios exclu√≠dos da lista para n√£o percorr√™-los
            dirs[:] = [d for d in dirs if not self._deve_excluir(d)]
            
            for arquivo in files:
                if not self._deve_excluir(arquivo):
                    try:
                        caminho_arquivo = Path(root) / arquivo
                        tamanho_total += caminho_arquivo.stat().st_size
                        total_arquivos += 1
                    except (OSError, IOError):
                        continue
                        
        return tamanho_total, total_arquivos
        
    def _formatar_tamanho(self, bytes_size):
        """Formata tamanho em bytes para formato leg√≠vel"""
        for unidade in ['B', 'KB', 'MB', 'GB', 'TB']:
            if bytes_size < 1024.0:
                return f"{bytes_size:.1f} {unidade}"
            bytes_size /= 1024.0
        return f"{bytes_size:.1f} PB"
        
    def _calcular_hash_arquivo(self, caminho_arquivo):
        """Calcula hash MD5 de um arquivo"""
        hash_md5 = hashlib.md5()
        try:
            with open(caminho_arquivo, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash_md5.update(chunk)
        except Exception:
            return None
        return hash_md5.hexdigest()
        
    def _obter_info_diretorio(self, caminho):
        """Obt√©m informa√ß√µes sobre o diret√≥rio"""
        caminho = Path(caminho)
        if not caminho.exists():
            return None
            
        # Detecta tipo do diret√≥rio
        tipo_diretorio = "generico"
        if (caminho / "package.json").exists():
            tipo_diretorio = "nodejs"
        elif (caminho / "requirements.txt").exists() or (caminho / "setup.py").exists():
            tipo_diretorio = "python"
        elif (caminho / "pom.xml").exists():
            tipo_diretorio = "java"
        elif (caminho / ".git").exists():
            tipo_diretorio = "git"
            
        return {
            "nome": caminho.name,
            "caminho": str(caminho.absolute()),
            "tipo": tipo_diretorio,
            "ultima_modificacao": datetime.fromtimestamp(caminho.stat().st_mtime).isoformat()
        }
        
    def criar_backup(self, caminho_origem=None, nome_backup=None, compressao_maxima=False, silencioso=False, formato=None):
        """Cria backup de um diret√≥rio"""
        # Define caminho de origem
        if caminho_origem:
            caminho_origem = Path(caminho_origem).expanduser().resolve()
        else:
            caminho_origem = self.area_trabalho
            
        # Verifica se o diret√≥rio existe
        if not caminho_origem.exists():
            print(f"‚ùå Erro: Diret√≥rio '{caminho_origem}' n√£o encontrado!")
            return False
            
        if not caminho_origem.is_dir():
            print(f"‚ùå Erro: '{caminho_origem}' n√£o √© um diret√≥rio!")
            return False
            
        # Obt√©m informa√ß√µes do diret√≥rio
        info_diretorio = self._obter_info_diretorio(caminho_origem)
        nome_diretorio = info_diretorio["nome"]
        
        print(f"\nüì¶ INICIANDO BACKUP")
        print("=" * 50)
        print(f"üìÅ Diret√≥rio: {caminho_origem}")
        print(f"üè∑Ô∏è  Tipo: {info_diretorio['tipo']}")
        
        # Calcula tamanho e n√∫mero de arquivos
        print("üìä Calculando tamanho do backup...")
        self.tamanho_original, total_arquivos_estimado = self._calcular_tamanho_diretorio(caminho_origem)
        
        print(f"üìà Arquivos a processar: {total_arquivos_estimado:,}")
        print(f"üìè Tamanho estimado: {self._formatar_tamanho(self.tamanho_original)}")
        
        # Confirma se deve prosseguir
        if not silencioso:
            print(f"\nü§î Deseja prosseguir com o backup de '{nome_diretorio}'?")
            if self.padroes_custom:
                print(f"üö´ Padr√µes de exclus√£o adicionais: {', '.join(self.padroes_custom)}")
            print("   Escolha o formato de compress√£o:")
            print("   [1] .tar.gz (Linux/macOS)")
            print("   [2] .zip (Windows)")
            print("      OBS: Para poder descompactar em um Windows")
            formato_opcao = input("   Digite 1 para .tar.gz ou 2 para .zip: ").strip()
            if formato_opcao == '1':
                formato = 'tar'
            elif formato_opcao == '2':
                formato = 'zip'
            else:
                print("‚ùå Op√ß√£o inv√°lida. Backup cancelado.")
                return False
            confirmacao = input("   Digite 's' para continuar ou qualquer tecla para cancelar: ").lower()
            if confirmacao != 's':
                print("‚ùå Backup cancelado pelo usu√°rio.")
                return False
        else:
            if not formato:
                print("‚ùå O formato de backup deve ser especificado em modo silencioso.")
                return False
                
        # Define nome do arquivo de backup
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        if formato == 'tar':
            if nome_backup:
                nome_arquivo = f"{nome_backup}_{timestamp}.tar.gz"
            else:
                nome_arquivo = f"backup_{nome_diretorio}_{timestamp}.tar.gz"
        elif formato == 'zip':
            if nome_backup:
                nome_arquivo = f"{nome_backup}_{timestamp}.zip"
            else:
                nome_arquivo = f"backup_{nome_diretorio}_{timestamp}.zip"
        else:
            print("‚ùå Formato de backup inv√°lido.")
            return False
        caminho_backup = self.dir_backups / nome_arquivo
        
        # Reset estat√≠sticas
        self.reset_stats()
        
        try:
            print(f"\n‚è≥ Criando backup: {nome_arquivo}")
            if formato == 'tar':
                # Define compress√£o
                if compressao_maxima:
                    modo_tar = "w:gz"
                    compresslevel = 9
                    print("üóúÔ∏è  Usando compress√£o m√°xima...")
                else:
                    modo_tar = "w:gz"
                    compresslevel = 6
                # Cria arquivo tar
                with tarfile.open(caminho_backup, modo_tar, compresslevel=compresslevel) as tar:
                    self._adicionar_arquivos_ao_tar(tar, caminho_origem, total_arquivos_estimado)
            elif formato == 'zip':
                print("üóúÔ∏è  Compactando em formato ZIP...")
                with zipfile.ZipFile(caminho_backup, 'w', compression=zipfile.ZIP_DEFLATED, compresslevel=9 if compressao_maxima else 6) as zipf:
                    self._adicionar_arquivos_ao_zip(zipf, caminho_origem, total_arquivos_estimado)
                
            # Calcula informa√ß√µes do backup
            tamanho_backup = caminho_backup.stat().st_size
            taxa_compressao = ((self.tamanho_original - tamanho_backup) / self.tamanho_original * 100) if self.tamanho_original > 0 else 0
            hash_backup = self._calcular_hash_arquivo(caminho_backup)
            
            # Registra no √≠ndice
            self._registrar_backup({
                "arquivo": nome_arquivo,
                "diretorio_origem": str(caminho_origem),
                "nome_diretorio": nome_diretorio,
                "data_criacao": datetime.now().isoformat(),
                "tamanho_original": self.tamanho_original,
                "tamanho_backup": tamanho_backup,
                "taxa_compressao": taxa_compressao,
                "total_arquivos": self.total_arquivos,
                "arquivos_excluidos": self.arquivos_excluidos,
                "diretorios_excluidos": self.diretorios_excluidos,
                "tipo_diretorio": info_diretorio["tipo"],
                "hash_md5": hash_backup,
                "compressao_maxima": compressao_maxima,
                "formato": formato
            })
            
            # Relat√≥rio final
            print(f"\n‚úÖ BACKUP CONCLU√çDO COM SUCESSO!")
            print("=" * 50)
            print(f"üìÅ Arquivo: {nome_arquivo}")
            print(f"üìä Arquivos inclu√≠dos: {self.total_arquivos:,}")
            print(f"üö´ Itens exclu√≠dos: {self.arquivos_excluidos + self.diretorios_excluidos:,}")
            print(f"üìè Tamanho original: {self._formatar_tamanho(self.tamanho_original)}")
            print(f"üóúÔ∏è  Tamanho backup: {self._formatar_tamanho(tamanho_backup)}")
            print(f"üìâ Compress√£o: {taxa_compressao:.1f}%")
            print(f"üîí Hash MD5: {hash_backup[:16]}...")
            print(f"üíæ Localiza√ß√£o: {caminho_backup}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao criar backup: {e}")
            # Remove arquivo parcial se existir
            if caminho_backup.exists():
                try:
                    caminho_backup.unlink()
                except:
                    pass
            return False

    def _adicionar_arquivos_ao_zip(self, zipf, caminho_origem, total_estimado):
        """Adiciona arquivos ao zip com progresso"""
        contador = 0
        ultimo_relatorio = 0
        relatorio_intervalo = max(100, total_estimado // 50)
        print("üì¶ Compactando arquivos...")
        for root, dirs, files in os.walk(caminho_origem):
            dirs_originais = len(dirs)
            dirs[:] = [d for d in dirs if not self._deve_excluir(d)]
            self.diretorios_excluidos += (dirs_originais - len(dirs))
            for arquivo in files:
                if not self._deve_excluir(arquivo):
                    try:
                        caminho_arquivo = Path(root) / arquivo
                        caminho_relativo = caminho_arquivo.relative_to(caminho_origem.parent)
                        zipf.write(str(caminho_arquivo), arcname=str(caminho_relativo))
                        self.total_arquivos += 1
                        contador += 1
                        if contador - ultimo_relatorio >= relatorio_intervalo:
                            if total_estimado > 0:
                                progresso = (contador / total_estimado) * 100
                                print(f"   üì¶ Progresso: {contador:,}/{total_estimado:,} arquivos ({progresso:.1f}%)")
                            else:
                                print(f"   üì¶ Processados: {contador:,} arquivos")
                            ultimo_relatorio = contador
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è  Erro ao adicionar {arquivo}: {e}")
                        continue
            
    def _adicionar_arquivos_ao_tar(self, tar, caminho_origem, total_estimado):
        """Adiciona arquivos ao tar com progresso"""
        contador = 0
        ultimo_relatorio = 0
        relatorio_intervalo = max(100, total_estimado // 50)  # Relat√≥rio a cada 2%
        
        print("üì¶ Compactando arquivos...")
        
        for root, dirs, files in os.walk(caminho_origem):
            # Remove diret√≥rios exclu√≠dos da lista
            dirs_originais = len(dirs)
            dirs[:] = [d for d in dirs if not self._deve_excluir(d)]
            self.diretorios_excluidos += (dirs_originais - len(dirs))
            
            for arquivo in files:
                if not self._deve_excluir(arquivo):
                    try:
                        caminho_arquivo = Path(root) / arquivo
                        # Calcula caminho relativo mantendo estrutura
                        caminho_relativo = caminho_arquivo.relative_to(caminho_origem.parent)
                        tar.add(str(caminho_arquivo), arcname=str(caminho_relativo))
                        self.total_arquivos += 1
                        contador += 1
                        
                        # Mostra progresso
                        if contador - ultimo_relatorio >= relatorio_intervalo:
                            if total_estimado > 0:
                                progresso = (contador / total_estimado) * 100
                                print(f"   üì¶ Progresso: {contador:,}/{total_estimado:,} arquivos ({progresso:.1f}%)")
                            else:
                                print(f"   üì¶ Processados: {contador:,} arquivos")
                            ultimo_relatorio = contador
                            
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è  Erro ao adicionar {arquivo}: {e}")
                        continue
                else:
                    self.arquivos_excluidos += 1
                    
    def _registrar_backup(self, info_backup):
        """Registra backup no √≠ndice"""
        try:
            if self.indice_backups.exists():
                with open(self.indice_backups, 'r', encoding='utf-8') as f:
                    backups = json.load(f)
            else:
                backups = []
                
            backups.append(info_backup)
            
            with open(self.indice_backups, 'w', encoding='utf-8') as f:
                json.dump(backups, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Aviso: Erro ao registrar backup no √≠ndice: {e}")
            
    def listar_backups(self):
        """Lista todos os backups existentes"""
        print("\nüìã BACKUPS EXISTENTES")
        print("=" * 60)
        
        if not self.indice_backups.exists():
            print("üìÇ Nenhum backup encontrado ainda.")
            print(f"üí° Execute um backup primeiro com: python3 backup.py")
            return
            
        try:
            with open(self.indice_backups, 'r', encoding='utf-8') as f:
                backups = json.load(f)
        except Exception as e:
            print(f"‚ùå Erro ao ler √≠ndice de backups: {e}")
            return
            
        if not backups:
            print("üìÇ Nenhum backup registrado.")
            return
            
        # Agrupa por diret√≥rio
        por_diretorio = {}
        for backup in backups:
            nome_dir = backup['nome_diretorio']
            if nome_dir not in por_diretorio:
                por_diretorio[nome_dir] = []
            por_diretorio[nome_dir].append(backup)
            
        # Lista backups agrupados
        for nome_diretorio, backups_dir in por_diretorio.items():
            print(f"\nüìÅ {nome_diretorio} ({len(backups_dir)} backups)")
            
            # Ordena por data (mais recente primeiro)
            backups_dir.sort(key=lambda x: x['data_criacao'], reverse=True)
            
            for i, backup in enumerate(backups_dir):
                data_criacao = datetime.fromisoformat(backup['data_criacao'])
                data_str = data_criacao.strftime('%d/%m/%Y %H:%M:%S')
                
                tamanho = self._formatar_tamanho(backup['tamanho_backup'])
                compressao = backup.get('taxa_compressao', 0)
                
                # Marca o mais recente
                marcador = "üü¢ RECENTE" if i == 0 else "   "
                
                print(f"  {marcador} {backup['arquivo']}")
                print(f"      üìÖ {data_str}")
                print(f"      üìä {tamanho} (compress√£o: {compressao:.1f}%)")
                print(f"      üéØ Tipo: {backup.get('tipo_diretorio', 'generico')}")
                print(f"      üìÅ Origem: {backup.get('diretorio_origem', 'N/A')}")
                
        print(f"\nüìä Total: {len(backups)} backups")
        
    def limpar_backups_antigos(self, dias_manter=30, max_por_diretorio=5):
        """Remove backups antigos baseado em crit√©rios"""
        print(f"\nüßπ LIMPANDO BACKUPS ANTIGOS")
        print(f"üìã Crit√©rios:")
        print(f"   ‚Ä¢ Manter no m√°ximo {max_por_diretorio} backups por diret√≥rio")
        print(f"   ‚Ä¢ Manter backups dos √∫ltimos {dias_manter} dias")
        print("=" * 50)
        
        if not self.indice_backups.exists():
            print("üìÇ Nenhum √≠ndice de backups encontrado.")
            return
            
        try:
            with open(self.indice_backups, 'r', encoding='utf-8') as f:
                backups = json.load(f)
        except Exception as e:
            print(f"‚ùå Erro ao ler √≠ndice: {e}")
            return
            
        if not backups:
            print("üìÇ Nenhum backup para limpar.")
            return
            
        data_limite = datetime.now() - timedelta(days=dias_manter)
        backups_para_remover = []
        backups_mantidos = []
        
        # Agrupa por diret√≥rio
        por_diretorio = {}
        for backup in backups:
            nome_dir = backup['nome_diretorio']
            if nome_dir not in por_diretorio:
                por_diretorio[nome_dir] = []
            por_diretorio[nome_dir].append(backup)
            
        # Aplica crit√©rios de limpeza
        total_removidos = 0
        tamanho_liberado = 0
        
        for nome_diretorio, backups_dir in por_diretorio.items():
            # Ordena por data (mais recente primeiro)
            backups_dir.sort(key=lambda x: x['data_criacao'], reverse=True)
            
            print(f"\nüìÅ Processando: {nome_diretorio}")
            
            for i, backup in enumerate(backups_dir):
                data_backup = datetime.fromisoformat(backup['data_criacao'])
                arquivo_backup = self.dir_backups / backup['arquivo']
                
                deve_remover = False
                motivo = ""
                
                # Crit√©rio 1: Mais de max_por_diretorio backups
                if i >= max_por_diretorio:
                    deve_remover = True
                    motivo = f"excede limite ({max_por_diretorio} por diret√≥rio)"
                    
                # Crit√©rio 2: Mais antigo que dias_manter
                elif data_backup < data_limite:
                    deve_remover = True
                    motivo = f"mais antigo que {dias_manter} dias"
                    
                if deve_remover:
                    if arquivo_backup.exists():
                        try:
                            tamanho_arquivo = arquivo_backup.stat().st_size
                            arquivo_backup.unlink()
                            backups_para_remover.append(backup)
                            total_removidos += 1
                            tamanho_liberado += tamanho_arquivo
                            
                            data_str = data_backup.strftime('%d/%m/%Y')
                            tamanho_str = self._formatar_tamanho(tamanho_arquivo)
                            print(f"   üóëÔ∏è  Removido: {backup['arquivo']} ({data_str}, {tamanho_str}) - {motivo}")
                            
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è  Erro ao remover {backup['arquivo']}: {e}")
                            backups_mantidos.append(backup)
                    else:
                        backups_para_remover.append(backup)  # Remove do √≠ndice mesmo se arquivo n√£o existe
                        print(f"   ‚ö†Ô∏è  Arquivo {backup['arquivo']} n√£o encontrado (removido do √≠ndice)")
                else:
                    backups_mantidos.append(backup)
                    
        # Atualiza √≠ndice
        if backups_para_remover:
            try:
                with open(self.indice_backups, 'w', encoding='utf-8') as f:
                    json.dump(backups_mantidos, f, indent=2, ensure_ascii=False)
            except Exception as e:
                print(f"‚ùå Erro ao atualizar √≠ndice: {e}")
                
        # Relat√≥rio final
        print(f"\n‚úÖ LIMPEZA CONCLU√çDA")
        print("=" * 30)
        print(f"üóëÔ∏è  Backups removidos: {total_removidos}")
        print(f"üíæ Espa√ßo liberado: {self._formatar_tamanho(tamanho_liberado)}")
        print(f"üìÅ Backups mantidos: {len(backups_mantidos)}")
        
    def restaurar_backup(self):
        """Interface interativa para restaurar backups"""
        print("\nüîÑ RESTAURA√á√ÉO DE BACKUP")
        print("=" * 40)
        
        if not self.indice_backups.exists():
            print("üìÇ Nenhum backup encontrado para restaurar.")
            return
            
        try:
            with open(self.indice_backups, 'r', encoding='utf-8') as f:
                backups = json.load(f)
        except Exception as e:
            print(f"‚ùå Erro ao ler √≠ndice: {e}")
            return
            
        if not backups:
            print("üìÇ Nenhum backup dispon√≠vel.")
            return
            
        # Lista backups dispon√≠veis
        print("Backups dispon√≠veis:")
        backups_ordenados = sorted(backups, key=lambda x: x['data_criacao'], reverse=True)
        
        for i, backup in enumerate(backups_ordenados):
            data = datetime.fromisoformat(backup['data_criacao'])
            data_str = data.strftime('%d/%m/%Y %H:%M')
            tamanho = self._formatar_tamanho(backup['tamanho_backup'])
            
            print(f"  [{i+1}] {backup['nome_diretorio']} - {data_str} ({tamanho})")
            
        # Sele√ß√£o do backup
        try:
            escolha = input(f"\nEscolha um backup (1-{len(backups_ordenados)}) ou 'c' para cancelar: ").strip()
            if escolha.lower() == 'c':
                print("‚ùå Restaura√ß√£o cancelada.")
                return
                
            indice = int(escolha) - 1
            if indice < 0 or indice >= len(backups_ordenados):
                print("‚ùå Op√ß√£o inv√°lida.")
                return
                
        except ValueError:
            print("‚ùå Op√ß√£o inv√°lida.")
            return
            
        backup_escolhido = backups_ordenados[indice]
        arquivo_backup = self.dir_backups / backup_escolhido['arquivo']
        
        if not arquivo_backup.exists():
            print(f"‚ùå Arquivo de backup n√£o encontrado: {backup_escolhido['arquivo']}")
            return
            
        # Escolha do destino
        print(f"\nüìÅ Restaurando: {backup_escolhido['nome_diretorio']}")
        print(f"üìÇ Origem: {backup_escolhido.get('diretorio_origem', 'N/A')}")
        
        destino_default = Path.home() / "√Årea de trabalho" / "restauracao" / backup_escolhido['nome_diretorio']
        destino_str = input(f"Diret√≥rio de destino (Enter para {destino_default}): ").strip()
        
        if destino_str:
            destino = Path(destino_str).expanduser()
        else:
            destino = destino_default
            
        # Cria diret√≥rio de destino
        destino.mkdir(parents=True, exist_ok=True)
        
        # Confirma restaura√ß√£o
        print(f"\nü§î Confirma restaura√ß√£o?")
        print(f"   üì¶ Backup: {backup_escolhido['arquivo']}")
        print(f"   üìÅ Destino: {destino}")
        confirmacao = input("   Digite 's' para confirmar: ").lower()
        
        if confirmacao != 's':
            print("‚ùå Restaura√ß√£o cancelada.")
            return
            
        # Executa restaura√ß√£o
        try:
            print(f"\n‚è≥ Extraindo backup...")
            with tarfile.open(arquivo_backup, 'r:gz') as tar:
                tar.extractall(path=destino.parent)
                
            print(f"‚úÖ Backup restaurado com sucesso!")
            print(f"üìÅ Localiza√ß√£o: {destino}")
            
        except Exception as e:
            print(f"‚ùå Erro durante restaura√ß√£o: {e}")


def main():
    parser = argparse.ArgumentParser(
        description="Script de backup universal de diret√≥rios",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
EXEMPLOS DE USO:
  python3 backup.py                                    # Backup completo da √Årea de Trabalho
  python3 backup.py -d /home/user/documentos           # Backup de diret√≥rio espec√≠fico
  python3 backup.py -d ./projetos --nome meus_projetos # Backup com nome personalizado
  python3 backup.py --compressao-maxima                # Backup com m√°xima compress√£o
  python3 backup.py --excluir "*.iso,Downloads,tmp"    # Excluir padr√µes espec√≠ficos
  python3 backup.py --silencioso                       # Backup sem confirma√ß√µes
  python3 backup.py --listar-backups                   # Lista backups existentes
  python3 backup.py --limpar-antigos                   # Remove backups antigos
  python3 backup.py --restaurar                        # Interface de restaura√ß√£o
        """
    )
    
    parser.add_argument('-d', '--diretorio', 
                       help='Caminho do diret√≥rio para backup (padr√£o: √Årea de Trabalho)')
    parser.add_argument('--nome', 
                       help='Nome personalizado para o backup')
    parser.add_argument('--compressao-maxima', action='store_true',
                       help='Usa compress√£o m√°xima (mais lento, mas menor arquivo)')
    parser.add_argument('--excluir',
                       help='Padr√µes adicionais para excluir (separados por v√≠rgula)')
    parser.add_argument('--silencioso', action='store_true',
                       help='Executa backup sem pedir confirma√ß√£o (obrigat√≥rio informar --formato)')
    parser.add_argument('--formato', choices=['tar', 'zip'],
                       help='Formato de compress√£o: "tar" para .tar.gz (Linux/macOS), "zip" para .zip (Windows)')
    parser.add_argument('--listar-backups', action='store_true',
                       help='Lista todos os backups existentes')
    parser.add_argument('--limpar-antigos', action='store_true',
                       help='Remove backups antigos (mant√©m √∫ltimos 5 ou dos √∫ltimos 30 dias)')
    parser.add_argument('--restaurar', action='store_true',
                       help='Interface interativa para restaurar backups')
    
    args = parser.parse_args()
    
    # Cria inst√¢ncia do backup
    backup = BackupUniversal()
    
    # Adiciona padr√µes de exclus√£o personalizados
    if args.excluir:
        backup.adicionar_padroes_exclusao(args.excluir)
        print(f"üö´ Padr√µes de exclus√£o adicionais: {args.excluir}")
        
    # Executa a√ß√£o baseada nos argumentos
    if args.listar_backups:
        backup.listar_backups()
        
    elif args.limpar_antigos:
        backup.limpar_backups_antigos()
        
    elif args.restaurar:
        backup.restaurar_backup()
        
    else:
        # Executa backup
        sucesso = backup.criar_backup(
            caminho_origem=args.diretorio,
            nome_backup=args.nome,
            compressao_maxima=args.compressao_maxima,
            silencioso=args.silencioso,
            formato=args.formato
        )
        
        if sucesso:
            print("\nüí° DICAS:")
            print("   ‚Ä¢ Execute backups regularmente (semanal/quinzenal)")
            print("   ‚Ä¢ Use --limpar-antigos para manter espa√ßo em disco")
            print("   ‚Ä¢ Teste restaura√ß√µes periodicamente")
            print("   ‚Ä¢ Considere sincronizar a pasta 'backups' com nuvem")
            print("   ‚Ä¢ Use --excluir para personalizar padr√µes de exclus√£o")
        else:
            print("\n‚ö†Ô∏è  Verifique se o diret√≥rio especificado existe e √© acess√≠vel")


if __name__ == "__main__":
    main()
